{"version":3,"sources":["node_modules/browser-pack/_prelude.js","C:/Program Files (x86)/dashjs_src/dash.js-development/dash.js/src/core/FactoryMaker.js","C:/Program Files (x86)/dashjs_src/dash.js-development/dash.js/src/core/events/CoreEvents.js","C:/Program Files (x86)/dashjs_src/dash.js-development/dash.js/src/core/events/Events.js","C:/Program Files (x86)/dashjs_src/dash.js-development/dash.js/src/core/events/EventsBase.js","C:/Program Files (x86)/dashjs_src/dash.js-development/dash.js/src/streaming/MediaPlayerEvents.js","C:/Program Files (x86)/dashjs_src/dash.js-development/dash.js/src/streaming/metrics/MetricsReporting.js","C:/Program Files (x86)/dashjs_src/dash.js-development/dash.js/src/streaming/metrics/MetricsReportingEvents.js","C:/Program Files (x86)/dashjs_src/dash.js-development/dash.js/src/streaming/metrics/controllers/MetricsCollectionController.js","C:/Program Files (x86)/dashjs_src/dash.js-development/dash.js/src/streaming/metrics/controllers/MetricsController.js","C:/Program Files (x86)/dashjs_src/dash.js-development/dash.js/src/streaming/metrics/controllers/MetricsHandlersController.js","C:/Program Files (x86)/dashjs_src/dash.js-development/dash.js/src/streaming/metrics/controllers/RangeController.js","C:/Program Files (x86)/dashjs_src/dash.js-development/dash.js/src/streaming/metrics/controllers/ReportingController.js","C:/Program Files (x86)/dashjs_src/dash.js-development/dash.js/src/streaming/metrics/metrics/MetricsHandlerFactory.js","C:/Program Files (x86)/dashjs_src/dash.js-development/dash.js/src/streaming/metrics/metrics/handlers/BufferLevelHandler.js","C:/Program Files (x86)/dashjs_src/dash.js-development/dash.js/src/streaming/metrics/metrics/handlers/DVBErrorsHandler.js","C:/Program Files (x86)/dashjs_src/dash.js-development/dash.js/src/streaming/metrics/metrics/handlers/GenericMetricHandler.js","C:/Program Files (x86)/dashjs_src/dash.js-development/dash.js/src/streaming/metrics/metrics/handlers/HttpListHandler.js","C:/Program Files (x86)/dashjs_src/dash.js-development/dash.js/src/streaming/metrics/reporting/ReportingFactory.js","C:/Program Files (x86)/dashjs_src/dash.js-development/dash.js/src/streaming/metrics/reporting/reporters/DVBReporting.js","C:/Program Files (x86)/dashjs_src/dash.js-development/dash.js/src/streaming/metrics/utils/DVBErrorsTranslator.js","C:/Program Files (x86)/dashjs_src/dash.js-development/dash.js/src/streaming/metrics/utils/HandlerHelpers.js","C:/Program Files (x86)/dashjs_src/dash.js-development/dash.js/src/streaming/metrics/utils/ManifestParsing.js","C:/Program Files (x86)/dashjs_src/dash.js-development/dash.js/src/streaming/metrics/utils/MetricSerialiser.js","C:/Program Files (x86)/dashjs_src/dash.js-development/dash.js/src/streaming/metrics/utils/RNG.js","C:/Program Files (x86)/dashjs_src/dash.js-development/dash.js/src/streaming/metrics/vo/DVBErrors.js","C:/Program Files (x86)/dashjs_src/dash.js-development/dash.js/src/streaming/metrics/vo/Metrics.js","C:/Program Files (x86)/dashjs_src/dash.js-development/dash.js/src/streaming/metrics/vo/Range.js","C:/Program Files (x86)/dashjs_src/dash.js-development/dash.js/src/streaming/metrics/vo/Reporting.js","C:/Program Files (x86)/dashjs_src/dash.js-development/dash.js/src/streaming/utils/CustomTimeRanges.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","dashjs","MetricsReporting","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_dereq_","FactoryMaker","extend","name","childInstance","override","context","extensionContext","getExtensionContext","instance","getSingletonInstance","className","singletonContexts","obj","setSingletonInstance","push","getClassFactory","classConstructor","undefined","create","merge","__dashjs_factory_name","apply","arguments","getSingletonFactory","getInstance","args","extensionObject","extension","factory","parent","prop","hasOwnProperty","extensions","forEach","CoreEvents","_EventsBase","_get","Object","getPrototypeOf","prototype","BUFFERING_COMPLETED","BUFFER_CLEARED","BUFFER_LEVEL_UPDATED","BYTES_APPENDED","CHECK_FOR_EXISTENCE_COMPLETED","CURRENT_TRACK_CHANGED","DATA_UPDATE_COMPLETED","DATA_UPDATE_STARTED","INITIALIZATION_LOADED","INIT_FRAGMENT_LOADED","INIT_REQUESTED","INTERNAL_MANIFEST_LOADED","LIVE_EDGE_SEARCH_COMPLETED","LOADING_COMPLETED","LOADING_PROGRESS","MANIFEST_UPDATED","MEDIA_FRAGMENT_LOADED","QUOTA_EXCEEDED","REPRESENTATION_UPDATED","SEGMENTS_LOADED","SERVICE_LOCATION_BLACKLIST_CHANGED","SOURCEBUFFER_APPEND_COMPLETED","SOURCEBUFFER_REMOVE_COMPLETED","STREAMS_COMPOSED","STREAM_BUFFERING_COMPLETED","STREAM_COMPLETED","STREAM_TEARDOWN_COMPLETE","TIMED_TEXT_REQUESTED","TIME_SYNCHRONIZATION_COMPLETED","URL_RESOLUTION_FAILED","WALLCLOCK_TIME_UPDATED","XLINK_ELEMENT_LOADED","XLINK_READY","Events","_CoreEvents","events","EventsBase","config","publicOnly","evt","indexOf","MediaPlayerEvents","AST_IN_FUTURE","BUFFER_EMPTY","BUFFER_LOADED","BUFFER_LEVEL_STATE_CHANGED","ERROR","FRAGMENT_LOADING_COMPLETED","FRAGMENT_LOADING_STARTED","FRAGMENT_LOADING_ABANDONED","LOG","MANIFEST_LOADED","METRICS_CHANGED","METRIC_CHANGED","METRIC_ADDED","METRIC_UPDATED","PERIOD_SWITCH_COMPLETED","PERIOD_SWITCH_STARTED","QUALITY_CHANGE_REQUESTED","QUALITY_CHANGE_RENDERED","STREAM_INITIALIZED","TEXT_TRACKS_ADDED","TEXT_TRACK_ADDED","CAN_PLAY","PLAYBACK_ENDED","PLAYBACK_ERROR","PLAYBACK_NOT_ALLOWED","PLAYBACK_METADATA_LOADED","PLAYBACK_PAUSED","PLAYBACK_PLAYING","PLAYBACK_PROGRESS","PLAYBACK_RATE_CHANGED","PLAYBACK_SEEKED","PLAYBACK_SEEKING","PLAYBACK_STARTED","PLAYBACK_TIME_UPDATED","mediaPlayerEvents","createMetricsReporting","dvbErrorsTranslator","_utilsDVBErrorsTranslator2","eventBus","metricsModel","_controllersMetricsCollectionController2","getReportingFactory","_reportingReportingFactory2","getMetricsHandlerFactory","_metricsMetricsHandlerFactory2","_coreFactoryMaker2","_MetricsReportingEvents2","MetricsReportingEvents","METRICS_INITIALISATION_COMPLETE","BECAME_REPORTING_PLAYER","metricsReportingEvents","MetricsCollectionController","update","error","controllersToRemove","keys","metricsControllers","metrics","_utilsManifestParsing2","dashManifestModel","getMetrics","manifest","m","key","JSON","stringify","splice","controller","_MetricsController2","initialize","c","reset","trigger","setup","on","_coreEventsEvents2","MetricsController","metricsEntry","rangeController","_RangeController2","mediaElement","Range","reportingController","_ReportingController2","log","Reporting","metricsHandlersController","_MetricsHandlersController2","MetricsHandlersController","handle","handlers","handler","handleNewMetric","metric","value","mediaType","split","midx","ms","nextm","metricsHandlerFactory","_MediaPlayerEvents2","off","RangeController","rs","start","starttime","end","duration","ranges","add","useWallClockTime","_useWallClockTime","clear","_utilsCustomTimeRanges2","isEnabled","time","numRanges","Date","getTime","currentTime","ReportingController","reporting","some","reporter","reportingFactory","reporters","report","type","vos","MetricsHandlerFactory","listType","matches","match","keyRegex","knownFactoryProducts","message","register","unregister","BufferLevel","_handlersBufferLevelHandler2","DVBErrors","_handlersDVBErrorsHandler2","HttpList","_handlersHttpListHandler2","PlayList","_handlersGenericMetricHandler2","RepSwitchList","TcpList","BufferLevelHandler","getLowestBufferLevelVO","storedVOs","map","reduce","b","level","intervalCallback","vo","lastReportedTime","basename","rc","n_ms","handlerHelpers","validateN","reconstructFullMetricName","interval","setInterval","clearInterval","_utilsHandlerHelpers2","DVBErrorsHandler","onInitialisationComplete","unused","GenericMetricHandler","metricName","HttpListHandler","storedVos","requestType","ReportingFactory","entry","knownReportingSchemeIdUris","schemeIdUri","moduleName","urn:dvb:dash:reporting:2014","_reportersDVBReporting2","DVBReporting","doGetRequest","url","successCB","failureCB","req","XMLHttpRequest","oncomplete","reqIndex","pendingRequests","status","open","onloadend","onerror","send","Array","isArray","isReportingPlayer","metricSerialiser","serialise","USE_DRAFT_DVB_SPEC","reportingUrl","probability","reportingPlayerStatusDecided","randomNumberGenerator","random","allowPendingRequestsToCompleteOnReset","abort","_utilsMetricSerialiser2","_utilsRNG2","DVBErrorsTranslator","_voDVBErrors2","mpd","mpdurl","originalUrl","terror","metricModel","addDVBErrors","onManifestUpdate","onServiceLocationChanged","errorcode","BASE_URL_CHANGED","servicelocation","onBecameReporter","BECAME_REPORTER","handleHttpMetric","responsecode","CONNECTION_ERROR","tresponse","_serviceLocation","onMetricEvent","onPlaybackError","reason","MediaError","MEDIA_ERR_NETWORK","MEDIA_ERR_DECODE","CORRUPT_MEDIA_OTHER","initialise","HandlerHelpers","mn","isNaN","ManifestParsing","getMetricsRangeStartTime","dynamic","range","periods","reportingStartTime","getMpd","presentationStartTime","availabilityStartTime","getRegularPeriods","Metrics_asArray","metricEntry","_voMetrics2","isDynamic","getIsDynamic","Range_asArray","rangeEntry","_voRange2","getDuration","Reporting_asArray","reportingEntry","_voReporting2","MetricSerialiser","pairs","v","isBuiltIn","toString","slice","encodeURIComponent","join","toISOString","Math","round","RNG","crypto","randomNumbers","ArrayType","NUM_RANDOM_NUMBERS","getRandomValues","index","rand","min","max","MAX_VALUE","msCrypto","Uint32Array","pow","BYTES_PER_ELEMENT","ipaddress","SSL_CONNECTION_FAILED_PREFIX","DNS_RESOLUTION_FAILED","HOST_UNREACHABLE","CONNECTION_REFUSED","CORRUPT_MEDIA_ISOBMFF","Metrics","Infinity","CustomTimeRanges","customTimeRangeArray","mergeRanges","remove","rangeIndex1","rangeIndex2","range1","range2"],"mappings":"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","file":"dash.reporting.min.js","sourceRoot":"./src/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @module FactoryMaker\r\n */\r\nlet FactoryMaker = (function () {\r\n\r\n    let instance;\r\n    let extensions = [];\r\n    let singletonContexts = [];\r\n\r\n    function extend(name, childInstance, override, context) {\r\n        let extensionContext = getExtensionContext(context);\r\n        if (!extensionContext[name] && childInstance) {\r\n            extensionContext[name] = {instance: childInstance, override: override};\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Use this method from your extended object.  this.factory is injected into your object.\r\n     * this.factory.getSingletonInstance(this.context, 'VideoModel')\r\n     * will return the video model for use in the extended object.\r\n     *\r\n     * @param {Object} context - injected into extended object as this.context\r\n     * @param {string} className - string name found in all dash.js objects\r\n     * with name __dashjs_factory_name Will be at the bottom. Will be the same as the object's name.\r\n     * @returns {*} Context aware instance of specified singleton name.\r\n     * @memberof module:FactoryMaker\r\n     * @instance\r\n     */\r\n    function getSingletonInstance(context, className) {\r\n        for (let i in singletonContexts) {\r\n            let obj = singletonContexts[i];\r\n            if (obj.context === context && obj.name === className) {\r\n                return obj.instance;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Use this method to add an singleton instance to the system.  Useful for unit testing to mock objects etc.\r\n     *\r\n     * @param {Object} context\r\n     * @param {string} className\r\n     * @param {Object} instance\r\n     * @memberof module:FactoryMaker\r\n     * @instance\r\n     */\r\n    function setSingletonInstance(context, className, instance) {\r\n        for (let i in singletonContexts) {\r\n            let obj = singletonContexts[i];\r\n            if (obj.context === context && obj.name === className) {\r\n                singletonContexts[i].instance = instance;\r\n                return;\r\n            }\r\n        }\r\n        singletonContexts.push({ name: className, context: context, instance: instance });\r\n    }\r\n\r\n    function getClassFactory(classConstructor) {\r\n        return function (context) {\r\n            if (context === undefined) {\r\n                context = {};\r\n            }\r\n            return {\r\n                create: function () {\r\n                    return merge(classConstructor.__dashjs_factory_name, classConstructor.apply({ context: context }, arguments), context, arguments);\r\n                }\r\n            };\r\n        };\r\n    }\r\n\r\n    function getSingletonFactory(classConstructor) {\r\n        return function (context) {\r\n            let instance;\r\n            if (context === undefined) {\r\n                context = {};\r\n            }\r\n            return {\r\n                getInstance: function () {\r\n                    // If we don't have an instance yet check for one on the context\r\n                    if (!instance) {\r\n                        instance = getSingletonInstance(context, classConstructor.__dashjs_factory_name);\r\n                    }\r\n                    // If there's no instance on the context then create one\r\n                    if (!instance) {\r\n                        instance = merge(classConstructor.__dashjs_factory_name, classConstructor.apply({ context: context }, arguments), context, arguments);\r\n                        singletonContexts.push({ name: classConstructor.__dashjs_factory_name, context: context, instance: instance });\r\n                    }\r\n                    return instance;\r\n                }\r\n            };\r\n        };\r\n    }\r\n\r\n    function merge(name, classConstructor, context, args) {\r\n        let extensionContext = getExtensionContext(context);\r\n        let extensionObject = extensionContext[name];\r\n        if (extensionObject) {\r\n            let extension = extensionObject.instance;\r\n            if (extensionObject.override) { //Override public methods in parent but keep parent.\r\n                extension = extension.apply({ context: context, factory: instance, parent: classConstructor}, args);\r\n                for (const prop in extension) {\r\n                    if (classConstructor.hasOwnProperty(prop)) {\r\n                        classConstructor[prop] = extension[prop];\r\n                    }\r\n                }\r\n            } else { //replace parent object completely with new object. Same as dijon.\r\n                return extension.apply({ context: context, factory: instance}, args);\r\n            }\r\n        }\r\n        return classConstructor;\r\n    }\r\n\r\n    function getExtensionContext(context) {\r\n        let extensionContext;\r\n        extensions.forEach(function (obj) {\r\n            if (obj === context) {\r\n                extensionContext = obj;\r\n            }\r\n        });\r\n        if (!extensionContext) {\r\n            extensionContext = extensions.push(context);\r\n        }\r\n        return extensionContext;\r\n    }\r\n\r\n    instance = {\r\n        extend: extend,\r\n        getSingletonInstance: getSingletonInstance,\r\n        setSingletonInstance: setSingletonInstance,\r\n        getSingletonFactory: getSingletonFactory,\r\n        getClassFactory: getClassFactory\r\n    };\r\n\r\n    return instance;\r\n\r\n}());\r\n\r\nexport default FactoryMaker;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport EventsBase from './EventsBase';\r\n\r\n/**\r\n * These are internal events that should not be needed at the player level.\r\n * If you find and event in here that you would like access to from MediaPlayer level\r\n * please add an issue at https://github.com/Dash-Industry-Forum/dash.js/issues/new\r\n * @class\r\n * @ignore\r\n */\r\nclass CoreEvents extends EventsBase {\r\n    constructor () {\r\n        super();\r\n        this.BUFFERING_COMPLETED = 'bufferingCompleted';\r\n        this.BUFFER_CLEARED = 'bufferCleared';\r\n        this.BUFFER_LEVEL_UPDATED = 'bufferLevelUpdated';\r\n        this.BYTES_APPENDED = 'bytesAppended';\r\n        this.CHECK_FOR_EXISTENCE_COMPLETED = 'checkForExistenceCompleted';\r\n        this.CURRENT_TRACK_CHANGED = 'currentTrackChanged';\r\n        this.DATA_UPDATE_COMPLETED = 'dataUpdateCompleted';\r\n        this.DATA_UPDATE_STARTED = 'dataUpdateStarted';\r\n        this.INITIALIZATION_LOADED = 'initializationLoaded';\r\n        this.INIT_FRAGMENT_LOADED = 'initFragmentLoaded';\r\n        this.INIT_REQUESTED = 'initRequested';\r\n        this.INTERNAL_MANIFEST_LOADED = 'internalManifestLoaded';\r\n        this.LIVE_EDGE_SEARCH_COMPLETED = 'liveEdgeSearchCompleted';\r\n        this.LOADING_COMPLETED = 'loadingCompleted';\r\n        this.LOADING_PROGRESS = 'loadingProgress';\r\n        this.MANIFEST_UPDATED = 'manifestUpdated';\r\n        this.MEDIA_FRAGMENT_LOADED = 'mediaFragmentLoaded';\r\n        this.QUOTA_EXCEEDED = 'quotaExceeded';\r\n        this.REPRESENTATION_UPDATED = 'representationUpdated';\r\n        this.SEGMENTS_LOADED = 'segmentsLoaded';\r\n        this.SERVICE_LOCATION_BLACKLIST_CHANGED = 'serviceLocationBlacklistChanged';\r\n        this.SOURCEBUFFER_APPEND_COMPLETED = 'sourceBufferAppendCompleted';\r\n        this.SOURCEBUFFER_REMOVE_COMPLETED = 'sourceBufferRemoveCompleted';\r\n        this.STREAMS_COMPOSED = 'streamsComposed';\r\n        this.STREAM_BUFFERING_COMPLETED = 'streamBufferingCompleted';\r\n        this.STREAM_COMPLETED = 'streamCompleted';\r\n        this.STREAM_TEARDOWN_COMPLETE = 'streamTeardownComplete';\r\n        this.TIMED_TEXT_REQUESTED = 'timedTextRequested';\r\n        this.TIME_SYNCHRONIZATION_COMPLETED = 'timeSynchronizationComplete';\r\n        this.URL_RESOLUTION_FAILED = 'urlResolutionFailed';\r\n        this.WALLCLOCK_TIME_UPDATED = 'wallclockTimeUpdated';\r\n        this.XLINK_ELEMENT_LOADED = 'xlinkElementLoaded';\r\n        this.XLINK_READY = 'xlinkReady';\r\n    }\r\n}\r\n\r\nexport default CoreEvents;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nimport CoreEvents from './CoreEvents';\r\nclass Events extends CoreEvents {\r\n}\r\nlet events = new Events();\r\nexport default events;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass EventsBase {\r\n    extend (events, config) {\r\n        if (!events) return;\r\n\r\n        let override = config ? config.override : false;\r\n        let publicOnly = config ? config.publicOnly : false;\r\n\r\n\r\n        for (const evt in events) {\r\n            if (!events.hasOwnProperty(evt) || (this[evt] && !override)) continue;\r\n            if (publicOnly && events[evt].indexOf('public_') === -1) continue;\r\n            this[evt] = events[evt];\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default EventsBase;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport EventsBase from '../core/events/EventsBase';\r\n/**\r\n * @class\r\n *\r\n */\r\nclass MediaPlayerEvents extends EventsBase {\r\n\r\n    /**\r\n     * @description Public facing external events to be used when developing a player that implements dash.js.\r\n     */\r\n    constructor () {\r\n        super();\r\n        /**\r\n         * Triggered when playback will not start yet\r\n         * as the MPD's availabilityStartTime is in the future.\r\n         * Check delay property in payload to determine time before playback will start.\r\n         */\r\n        this.AST_IN_FUTURE = 'astInFuture';\r\n        /**\r\n         * Triggered when the video element's buffer state changes to stalled.\r\n         * Check mediaType in payload to determine type (Video, Audio, FragmentedText).\r\n         * @event MediaPlayerEvents#BUFFER_EMPTY\r\n         */\r\n        this.BUFFER_EMPTY = 'bufferStalled';\r\n        /**\r\n         * Triggered when the video element's buffer state changes to loaded.\r\n         * Check mediaType in payload to determine type (Video, Audio, FragmentedText).\r\n         * @event MediaPlayerEvents#BUFFER_LOADED\r\n         */\r\n        this.BUFFER_LOADED = 'bufferLoaded';\r\n\r\n        /**\r\n         * Triggered when the video element's buffer state changes, either stalled or loaded. Check payload for state.\r\n         * @event MediaPlayerEvents#BUFFER_LEVEL_STATE_CHANGED\r\n         */\r\n        this.BUFFER_LEVEL_STATE_CHANGED = 'bufferStateChanged';\r\n\r\n        /**\r\n        * Triggered when there is an error from the element or MSE source buffer.\r\n        * @event MediaPlayerEvents#ERROR\r\n        */\r\n        this.ERROR = 'error';\r\n\r\n        /**\r\n        * Triggered when a fragment download has completed.\r\n        * @event MediaPlayerEvents#FRAGMENT_LOADING_COMPLETED\r\n        */\r\n        this.FRAGMENT_LOADING_COMPLETED = 'fragmentLoadingCompleted';\r\n        /**\r\n        * Triggered when a fragment download has started.\r\n        * @event MediaPlayerEvents#FRAGMENT_LOADING_STARTED\r\n        */\r\n        this.FRAGMENT_LOADING_STARTED = 'fragmentLoadingStarted';\r\n        /**\r\n        * Triggered when a fragment download is abandoned due to detection of slow download base on the ABR abandon rule..\r\n        * @event MediaPlayerEvents#FRAGMENT_LOADING_ABANDONED\r\n        */\r\n        this.FRAGMENT_LOADING_ABANDONED = 'fragmentLoadingAbandoned';\r\n        /**\r\n         * Triggered when {@link module:Debug} log method is called.\r\n         * @event MediaPlayerEvents#LOG\r\n         */\r\n        this.LOG = 'log';\r\n        //TODO refactor with internal event\r\n        /**\r\n         * Triggered when the manifest load is complete\r\n         * @event MediaPlayerEvents#MANIFEST_LOADED\r\n         */\r\n        this.MANIFEST_LOADED = 'manifestLoaded';\r\n        /**\r\n         * Triggered anytime there is a change to the overall metrics.\r\n         * @event MediaPlayerEvents#METRICS_CHANGED\r\n         */\r\n        this.METRICS_CHANGED = 'metricsChanged';\r\n        /**\r\n         * Triggered when an individual metric is added, updated or cleared.\r\n         * @event MediaPlayerEvents#METRIC_CHANGED\r\n         */\r\n        this.METRIC_CHANGED = 'metricChanged';\r\n        /**\r\n         * Triggered every time a new metric is added.\r\n         * @event MediaPlayerEvents#METRIC_ADDED\r\n         */\r\n        this.METRIC_ADDED = 'metricAdded';\r\n        /**\r\n         * Triggered every time a metric is updated.\r\n         * @event MediaPlayerEvents#METRIC_UPDATED\r\n         */\r\n        this.METRIC_UPDATED = 'metricUpdated';\r\n        /**\r\n         * Triggered at the stream end of a period.\r\n         * @event MediaPlayerEvents#PERIOD_SWITCH_COMPLETED\r\n         */\r\n        this.PERIOD_SWITCH_COMPLETED = 'periodSwitchCompleted';\r\n        /**\r\n         * Triggered when a new period starts.\r\n         * @event MediaPlayerEvents#PERIOD_SWITCH_STARTED\r\n         */\r\n        this.PERIOD_SWITCH_STARTED = 'periodSwitchStarted';\r\n\r\n        /**\r\n         * Triggered when an ABR up /down switch is initialed; either by user in manual mode or auto mode via ABR rules.\r\n         * @event MediaPlayerEvents#QUALITY_CHANGE_REQUESTED\r\n         */\r\n        this.QUALITY_CHANGE_REQUESTED = 'qualityChangeRequested';\r\n\r\n        /**\r\n         * Triggered when the new ABR quality is being rendered on-screen.\r\n         * @event MediaPlayerEvents#QUALITY_CHANGE_RENDERED\r\n         */\r\n        this.QUALITY_CHANGE_RENDERED = 'qualityChangeRendered';\r\n\r\n        /**\r\n         * Triggered when the stream is setup and ready.\r\n         * @event MediaPlayerEvents#STREAM_INITIALIZED\r\n         */\r\n        this.STREAM_INITIALIZED = 'streamInitialized';\r\n        /**\r\n         * Triggered once all text tracks detected in the MPD are added to the video element.\r\n         * @event MediaPlayerEvents#TEXT_TRACKS_ADDED\r\n         */\r\n        this.TEXT_TRACKS_ADDED = 'allTextTracksAdded';\r\n        /**\r\n         * Triggered when a text track is added to the video element's TextTrackList\r\n         * @event MediaPlayerEvents#TEXT_TRACK_ADDED\r\n         */\r\n        this.TEXT_TRACK_ADDED = 'textTrackAdded';\r\n\r\n        /**\r\n         * Sent when enough data is available that the media can be played,\r\n         * at least for a couple of frames.  This corresponds to the\r\n         * HAVE_ENOUGH_DATA readyState.\r\n         * @event MediaPlayerEvents#CAN_PLAY\r\n         */\r\n        this.CAN_PLAY = 'canPlay';\r\n\r\n        /**\r\n         * Sent when playback completes.\r\n         * @event MediaPlayerEvents#PLAYBACK_ENDED\r\n         */\r\n        this.PLAYBACK_ENDED = 'playbackEnded';\r\n\r\n        /**\r\n         * Sent when an error occurs.  The element's error\r\n         * attribute contains more information.\r\n         * @event MediaPlayerEvents#PLAYBACK_ERROR\r\n         */\r\n        this.PLAYBACK_ERROR = 'playbackError';\r\n        /**\r\n         * Sent when playback is not allowed (for example if user gesture is needed).\r\n         * @event MediaPlayerEvents#PLAYBACK_NOT_ALLOWED\r\n         */\r\n        this.PLAYBACK_NOT_ALLOWED = 'playbackNotAllowed';\r\n        /**\r\n         * The media's metadata has finished loading; all attributes now\r\n         * contain as much useful information as they're going to.\r\n         * @event MediaPlayerEvents#PLAYBACK_METADATA_LOADED\r\n         */\r\n        this.PLAYBACK_METADATA_LOADED = 'playbackMetaDataLoaded';\r\n        /**\r\n         * Sent when playback is paused.\r\n         * @event MediaPlayerEvents#PLAYBACK_PAUSED\r\n         */\r\n        this.PLAYBACK_PAUSED = 'playbackPaused';\r\n        /**\r\n         * Sent when the media begins to play (either for the first time, after having been paused,\r\n         * or after ending and then restarting).\r\n         *\r\n         * @event MediaPlayerEvents#PLAYBACK_PLAYING\r\n         */\r\n        this.PLAYBACK_PLAYING = 'playbackPlaying';\r\n        /**\r\n         * Sent periodically to inform interested parties of progress downloading\r\n         * the media. Information about the current amount of the media that has\r\n         * been downloaded is available in the media element's buffered attribute.\r\n         * @event MediaPlayerEvents#PLAYBACK_PROGRESS\r\n         */\r\n        this.PLAYBACK_PROGRESS = 'playbackProgress';\r\n        /**\r\n         * Sent when the playback speed changes.\r\n         * @event MediaPlayerEvents#PLAYBACK_RATE_CHANGED\r\n         */\r\n        this.PLAYBACK_RATE_CHANGED = 'playbackRateChanged';\r\n        /**\r\n         * Sent when a seek operation completes.\r\n         * @event MediaPlayerEvents#PLAYBACK_SEEKED\r\n         */\r\n        this.PLAYBACK_SEEKED = 'playbackSeeked';\r\n        /**\r\n         * Sent when a seek operation begins.\r\n         * @event MediaPlayerEvents#PLAYBACK_SEEKING\r\n         */\r\n        this.PLAYBACK_SEEKING = 'playbackSeeking';\r\n        /**\r\n         * Sent when playback of the media starts after having been paused;\r\n         * that is, when playback is resumed after a prior pause event.\r\n         *\r\n         * @event MediaPlayerEvents#PLAYBACK_STARTED\r\n         */\r\n        this.PLAYBACK_STARTED = 'playbackStarted';\r\n        /**\r\n         * The time indicated by the element's currentTime attribute has changed.\r\n         * @event MediaPlayerEvents#PLAYBACK_TIME_UPDATED\r\n         */\r\n        this.PLAYBACK_TIME_UPDATED = 'playbackTimeUpdated';\r\n    }\r\n}\r\n\r\nlet mediaPlayerEvents = new MediaPlayerEvents();\r\nexport default mediaPlayerEvents;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport DVBErrorsTranslator from './utils/DVBErrorsTranslator';\r\nimport MetricsReportingEvents from './MetricsReportingEvents';\r\nimport MetricsCollectionController from './controllers/MetricsCollectionController';\r\nimport MetricsHandlerFactory from './metrics/MetricsHandlerFactory';\r\nimport ReportingFactory from './reporting/ReportingFactory';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\nfunction MetricsReporting() {\r\n\r\n    let context = this.context;\r\n    let instance;\r\n\r\n    let dvbErrorsTranslator;\r\n\r\n    /**\r\n     * Create a MetricsCollectionController, and a DVBErrorsTranslator\r\n     * @param {Object} config - dependancies from owner\r\n     * @return {MetricsCollectionController} Metrics Collection Controller\r\n     */\r\n    function createMetricsReporting(config) {\r\n        dvbErrorsTranslator = DVBErrorsTranslator(context).getInstance({\r\n            eventBus: config.eventBus,\r\n            metricsModel: config.metricsModel,\r\n        });\r\n\r\n        return MetricsCollectionController(context).create(config);\r\n    }\r\n\r\n    /**\r\n     * Get the ReportingFactory to allow new reporters to be registered\r\n     * @return {ReportingFactory} Reporting Factory\r\n     */\r\n    function getReportingFactory() {\r\n        return ReportingFactory(context).getInstance();\r\n    }\r\n\r\n    /**\r\n     * Get the MetricsHandlerFactory to allow new handlers to be registered\r\n     * @return {MetricsHandlerFactory} Metrics Handler Factory\r\n     */\r\n    function getMetricsHandlerFactory() {\r\n        return MetricsHandlerFactory(context).getInstance();\r\n    }\r\n\r\n    instance = {\r\n        createMetricsReporting:     createMetricsReporting,\r\n        getReportingFactory:        getReportingFactory,\r\n        getMetricsHandlerFactory:   getMetricsHandlerFactory\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nMetricsReporting.__dashjs_factory_name = 'MetricsReporting';\r\nlet factory = FactoryMaker.getClassFactory(MetricsReporting);\r\nfactory.events = MetricsReportingEvents;\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport EventsBase from '../../core/events/EventsBase';\r\n\r\nclass MetricsReportingEvents extends EventsBase {\r\n    constructor () {\r\n        super();\r\n\r\n        this.METRICS_INITIALISATION_COMPLETE = 'internal_metricsReportingInitialized';\r\n        this.BECAME_REPORTING_PLAYER = 'internal_becameReportingPlayer';\r\n    }\r\n}\r\n\r\nlet metricsReportingEvents = new MetricsReportingEvents();\r\nexport default metricsReportingEvents;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport MetricsController from './MetricsController';\r\nimport ManifestParsing from '../utils/ManifestParsing';\r\nimport FactoryMaker from '../../../core/FactoryMaker';\r\nimport MetricsReportingEvents from '../MetricsReportingEvents';\r\nimport Events from '../../../core/events/Events';\r\n\r\nfunction MetricsCollectionController(config) {\r\n\r\n    let metricsControllers = {};\r\n\r\n    let context = this.context;\r\n    let eventBus = config.eventBus;\r\n\r\n    function update(e) {\r\n        if (e.error) {\r\n            return;\r\n        }\r\n\r\n        // start by assuming all existing controllers need removing\r\n        let controllersToRemove = Object.keys(metricsControllers);\r\n\r\n        const metrics = ManifestParsing(context).getInstance({\r\n            dashManifestModel: config.dashManifestModel\r\n        }).getMetrics(e.manifest);\r\n\r\n        metrics.forEach(m => {\r\n            const key = JSON.stringify(m);\r\n\r\n            if (!metricsControllers.hasOwnProperty(key)) {\r\n                try {\r\n                    var controller = MetricsController(context).create(config);\r\n                    controller.initialize(m);\r\n                    metricsControllers[key] = controller;\r\n                } catch (e) {\r\n                    // fail quietly\r\n                }\r\n            } else {\r\n                // we still need this controller - delete from removal list\r\n                controllersToRemove.splice(key, 1);\r\n            }\r\n        });\r\n\r\n        // now remove the unwanted controllers\r\n        controllersToRemove.forEach(c => {\r\n            metricsControllers[c].reset();\r\n            delete metricsControllers[c];\r\n        });\r\n\r\n        eventBus.trigger(\r\n            MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE\r\n        );\r\n    }\r\n\r\n    function reset() {\r\n        Object.keys(metricsControllers).forEach(key => {\r\n            metricsControllers[key].reset();\r\n        });\r\n\r\n        metricsControllers = {};\r\n    }\r\n\r\n    function setup() {\r\n\r\n\r\n        eventBus.on(Events.MANIFEST_UPDATED, update);\r\n        eventBus.on(Events.STREAM_TEARDOWN_COMPLETE, reset);\r\n    }\r\n\r\n    setup();\r\n\r\n    // don't export any actual methods\r\n    return {};\r\n}\r\n\r\nMetricsCollectionController.__dashjs_factory_name = 'MetricsCollectionController';\r\nexport default FactoryMaker.getClassFactory(MetricsCollectionController);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../../core/FactoryMaker';\r\nimport RangeController from './RangeController';\r\nimport ReportingController from './ReportingController';\r\nimport MetricsHandlersController from './MetricsHandlersController';\r\n\r\nfunction MetricsController(config) {\r\n\r\n    let metricsHandlersController,\r\n        reportingController,\r\n        rangeController,\r\n        instance;\r\n\r\n    let context = this.context;\r\n\r\n    function initialize(metricsEntry) {\r\n        try {\r\n            rangeController = RangeController(context).create({\r\n                mediaElement: config.mediaElement\r\n            });\r\n\r\n            rangeController.initialize(metricsEntry.Range);\r\n\r\n            reportingController = ReportingController(context).create({\r\n                log: config.log\r\n            });\r\n\r\n            reportingController.initialize(metricsEntry.Reporting, rangeController);\r\n\r\n            metricsHandlersController = MetricsHandlersController(context).create({\r\n                log: config.log,\r\n                eventBus: config.eventBus,\r\n            });\r\n\r\n            metricsHandlersController.initialize(metricsEntry.metrics, reportingController);\r\n        } catch (e) {\r\n            reset();\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        if (metricsHandlersController) {\r\n            metricsHandlersController.reset();\r\n        }\r\n\r\n        if (reportingController) {\r\n            reportingController.reset();\r\n        }\r\n\r\n        if (rangeController) {\r\n            rangeController.reset();\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        reset:      reset\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nMetricsController.__dashjs_factory_name = 'MetricsController';\r\nexport default FactoryMaker.getClassFactory(MetricsController);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport MetricsHandlerFactory from '../metrics/MetricsHandlerFactory';\r\nimport FactoryMaker from '../../../core/FactoryMaker';\r\nimport MediaPlayerEvents from '../../MediaPlayerEvents';\r\n\r\nfunction MetricsHandlersController(config) {\r\n    let handlers = [];\r\n\r\n    let instance;\r\n    let context = this.context;\r\n    let eventBus = config.eventBus;\r\n\r\n    let metricsHandlerFactory = MetricsHandlerFactory(context).getInstance({\r\n        log: config.log,\r\n        eventBus: config.eventBus\r\n    });\r\n\r\n    function handle(e) {\r\n        handlers.forEach(handler => {\r\n            handler.handleNewMetric(e.metric, e.value, e.mediaType);\r\n        });\r\n    }\r\n\r\n    function initialize(metrics, reportingController) {\r\n        metrics.split(',').forEach(\r\n            (m, midx, ms) => {\r\n                var handler;\r\n\r\n                // there is a bug in ISO23009-1 where the metrics attribute\r\n                // is a comma-separated list but HttpList key can contain a\r\n                // comma enclosed by ().\r\n                if ((m.indexOf('(') !== -1) && m.indexOf(')') === -1) {\r\n                    let nextm = ms[midx + 1];\r\n\r\n                    if (nextm &&\r\n                            (nextm.indexOf('(') === -1) &&\r\n                            (nextm.indexOf(')') !== -1)) {\r\n                        m += ',' + nextm;\r\n\r\n                        // delete the next metric so forEach does not visit.\r\n                        delete ms[midx + 1];\r\n                    }\r\n                }\r\n\r\n                handler = metricsHandlerFactory.create(\r\n                    m,\r\n                    reportingController\r\n                );\r\n\r\n                if (handler) {\r\n                    handlers.push(handler);\r\n                }\r\n            }\r\n        );\r\n\r\n        eventBus.on(\r\n            MediaPlayerEvents.METRIC_ADDED,\r\n            handle,\r\n            instance\r\n        );\r\n\r\n        eventBus.on(\r\n            MediaPlayerEvents.METRIC_UPDATED,\r\n            handle,\r\n            instance\r\n        );\r\n    }\r\n\r\n    function reset() {\r\n        eventBus.off(\r\n            MediaPlayerEvents.METRIC_ADDED,\r\n            handle,\r\n            instance\r\n        );\r\n\r\n        eventBus.off(\r\n            MediaPlayerEvents.METRIC_UPDATED,\r\n            handle,\r\n            instance\r\n        );\r\n\r\n        handlers.forEach(handler => handler.reset());\r\n\r\n        handlers = [];\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        reset:      reset\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nMetricsHandlersController.__dashjs_factory_name = 'MetricsHandlersController';\r\nexport default FactoryMaker.getClassFactory(MetricsHandlersController);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../../core/FactoryMaker';\r\nimport CustomTimeRanges from '../../utils/CustomTimeRanges';\r\n\r\nfunction RangeController(config) {\r\n\r\n    let useWallClockTime = false;\r\n    let context = this.context;\r\n    let instance,\r\n        ranges;\r\n\r\n    let mediaElement = config.mediaElement;\r\n\r\n    function initialize(rs) {\r\n        if (rs && rs.length) {\r\n            rs.forEach(r => {\r\n                var start = r.starttime;\r\n                var end = start + r.duration;\r\n\r\n                ranges.add(start, end);\r\n            });\r\n\r\n            useWallClockTime = !!rs[0]._useWallClockTime;\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        ranges.clear();\r\n    }\r\n\r\n    function setup() {\r\n        ranges = CustomTimeRanges(context).create();\r\n    }\r\n\r\n    function isEnabled() {\r\n        var numRanges = ranges.length;\r\n        var time;\r\n\r\n        if (!numRanges) {\r\n            return true;\r\n        }\r\n\r\n        // When not present, DASH Metrics reporting is requested\r\n        // for the whole duration of the content.\r\n        time = useWallClockTime ?\r\n                (new Date().getTime() / 1000) :\r\n                mediaElement.currentTime;\r\n\r\n        for (var i = 0; i < numRanges; i += 1) {\r\n            let start = ranges.start(i);\r\n            let end = ranges.end(i);\r\n\r\n            if ((start <= time) && (time < end)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        reset:      reset,\r\n        isEnabled:  isEnabled\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nRangeController.__dashjs_factory_name = 'RangeController';\r\nexport default FactoryMaker.getClassFactory(RangeController);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../../core/FactoryMaker';\r\nimport ReportingFactory from '../reporting/ReportingFactory';\r\n\r\nfunction ReportingController(config) {\r\n\r\n    let reporters = [];\r\n    let instance;\r\n\r\n    let reportingFactory = ReportingFactory(this.context).getInstance({\r\n        log: config.log\r\n    });\r\n\r\n    function initialize(reporting, rangeController) {\r\n        // \"if multiple Reporting elements are present, it is expected that\r\n        // the client processes one of the recognized reporting schemes.\"\r\n        // to ignore this, and support multiple Reporting per Metric,\r\n        // simply change the 'some' below to 'forEach'\r\n        reporting.some(r => {\r\n            var reporter = reportingFactory.create(r, rangeController);\r\n\r\n            if (reporter) {\r\n                reporters.push(reporter);\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n\r\n    function reset() {\r\n        reporters.forEach(r => r.reset());\r\n        reporters = [];\r\n    }\r\n\r\n    function report(type, vos) {\r\n        reporters.forEach(r => r.report(type, vos));\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        reset:      reset,\r\n        report:     report\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nReportingController.__dashjs_factory_name = 'ReportingController';\r\nexport default FactoryMaker.getClassFactory(ReportingController);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../../core/FactoryMaker';\r\nimport BufferLevel from './handlers/BufferLevelHandler';\r\nimport DVBErrors from './handlers/DVBErrorsHandler';\r\nimport HttpList from './handlers/HttpListHandler';\r\nimport GenericMetricHandler from './handlers/GenericMetricHandler';\r\n\r\nfunction MetricsHandlerFactory(config) {\r\n\r\n    let instance;\r\n    let log = config.log;\r\n\r\n    // group 1: key, [group 3: n [, group 5: type]]\r\n    let keyRegex = /([a-zA-Z]*)(\\(([0-9]*)(\\,\\s*([a-zA-Z]*))?\\))?/;\r\n\r\n    let context = this.context;\r\n    let knownFactoryProducts = {\r\n        BufferLevel:    BufferLevel,\r\n        DVBErrors:      DVBErrors,\r\n        HttpList:       HttpList,\r\n        PlayList:       GenericMetricHandler,\r\n        RepSwitchList:  GenericMetricHandler,\r\n        TcpList:        GenericMetricHandler\r\n    };\r\n\r\n    function create(listType, reportingController) {\r\n        var matches = listType.match(keyRegex);\r\n        var handler;\r\n\r\n        if (!matches) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            handler = knownFactoryProducts[matches[1]](context).create({\r\n                eventBus: config.eventBus\r\n            });\r\n\r\n            handler.initialize(\r\n                matches[1],\r\n                reportingController,\r\n                matches[3],\r\n                matches[5]\r\n            );\r\n        } catch (e) {\r\n            handler = null;\r\n\r\n            log(`MetricsHandlerFactory: Could not create handler for type ${matches[1]} with args ${matches[3]}, ${matches[5]} (${e.message})`);\r\n        }\r\n\r\n        return handler;\r\n    }\r\n\r\n    function register(key, handler) {\r\n        knownFactoryProducts[key] = handler;\r\n    }\r\n\r\n    function unregister(key) {\r\n        delete knownFactoryProducts[key];\r\n    }\r\n\r\n    instance = {\r\n        create:     create,\r\n        register:   register,\r\n        unregister: unregister\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nMetricsHandlerFactory.__dashjs_factory_name = 'MetricsHandlerFactory';\r\nexport default FactoryMaker.getSingletonFactory(MetricsHandlerFactory);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../../../core/FactoryMaker';\r\nimport HandlerHelpers from '../../utils/HandlerHelpers';\r\n\r\nfunction BufferLevelHandler() {\r\n\r\n    let instance,\r\n        reportingController,\r\n        n,\r\n        name,\r\n        interval,\r\n        lastReportedTime;\r\n\r\n    let context = this.context;\r\n    let handlerHelpers = HandlerHelpers(context).getInstance();\r\n\r\n    let storedVOs = [];\r\n\r\n    function getLowestBufferLevelVO() {\r\n        try {\r\n            return Object.keys(storedVOs).map(\r\n                key => storedVOs[key]\r\n            ).reduce(\r\n                (a, b) => {\r\n                    return (a.level < b.level) ? a : b;\r\n                }\r\n            );\r\n        } catch (e) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    function intervalCallback() {\r\n        var vo = getLowestBufferLevelVO();\r\n\r\n        if (vo) {\r\n            if (lastReportedTime !== vo.t) {\r\n                lastReportedTime = vo.t;\r\n                reportingController.report(name, vo);\r\n            }\r\n        }\r\n    }\r\n\r\n    function initialize(basename, rc, n_ms) {\r\n        if (rc) {\r\n            // this will throw if n is invalid, to be\r\n            // caught by the initialize caller.\r\n            n = handlerHelpers.validateN(n_ms);\r\n            reportingController = rc;\r\n            name = handlerHelpers.reconstructFullMetricName(basename, n_ms);\r\n            interval = setInterval(intervalCallback, n);\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        clearInterval(interval);\r\n        interval = null;\r\n        n = 0;\r\n        reportingController = null;\r\n        lastReportedTime = null;\r\n    }\r\n\r\n    function handleNewMetric(metric, vo, type) {\r\n        if (metric === 'BufferLevel') {\r\n            storedVOs[type] = vo;\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        initialize:         initialize,\r\n        reset:              reset,\r\n        handleNewMetric:    handleNewMetric\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nBufferLevelHandler.__dashjs_factory_name = 'BufferLevelHandler';\r\nexport default FactoryMaker.getClassFactory(BufferLevelHandler);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../../../core/FactoryMaker';\r\nimport MetricsReportingEvents from '../../MetricsReportingEvents';\r\n\r\nfunction DVBErrorsHandler(config) {\r\n\r\n    let instance,\r\n        reportingController;\r\n\r\n    let eventBus = config.eventBus;\r\n\r\n    function onInitialisationComplete() {\r\n        // we only want to report this once per call to initialize\r\n        eventBus.off(\r\n            MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE,\r\n            onInitialisationComplete,\r\n            this\r\n        );\r\n\r\n        // Note: A Player becoming a reporting Player is itself\r\n        // something which is recorded by the DVBErrors metric.\r\n        eventBus.trigger(\r\n            MetricsReportingEvents.BECAME_REPORTING_PLAYER\r\n        );\r\n    }\r\n\r\n    function initialize(unused, rc) {\r\n        if (rc) {\r\n            reportingController = rc;\r\n\r\n            eventBus.on(\r\n                MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE,\r\n                onInitialisationComplete,\r\n                this\r\n            );\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        reportingController = null;\r\n    }\r\n\r\n    function handleNewMetric(metric, vo) {\r\n        // simply pass metric straight through\r\n        if (metric === 'DVBErrors') {\r\n            if (reportingController) {\r\n                reportingController.report(metric, vo);\r\n            }\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        initialize:         initialize,\r\n        reset:              reset,\r\n        handleNewMetric:    handleNewMetric\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nexport default FactoryMaker.getClassFactory(DVBErrorsHandler);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../../../core/FactoryMaker';\r\n\r\nfunction GenericMetricHandler() {\r\n\r\n    let instance,\r\n        metricName,\r\n        reportingController;\r\n\r\n    function initialize(name, rc) {\r\n        metricName = name;\r\n        reportingController = rc;\r\n    }\r\n\r\n    function reset() {\r\n        reportingController = null;\r\n        metricName = undefined;\r\n    }\r\n\r\n    function handleNewMetric(metric, vo) {\r\n        // simply pass metric straight through\r\n        if (metric === metricName) {\r\n            if (reportingController) {\r\n                reportingController.report(metricName, vo);\r\n            }\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        initialize:         initialize,\r\n        reset:              reset,\r\n        handleNewMetric:    handleNewMetric\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nGenericMetricHandler.__dashjs_factory_name = 'GenericMetricHandler';\r\nexport default FactoryMaker.getClassFactory(GenericMetricHandler);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../../../core/FactoryMaker';\r\nimport HandlerHelpers from '../../utils/HandlerHelpers';\r\n\r\nfunction HttpListHandler() {\r\n\r\n    let instance,\r\n        reportingController,\r\n        n,\r\n        type,\r\n        name,\r\n        interval;\r\n\r\n    let storedVos = [];\r\n\r\n    let handlerHelpers = HandlerHelpers(this.context).getInstance();\r\n\r\n    function intervalCallback() {\r\n        var vos = storedVos;\r\n\r\n        if (vos.length) {\r\n            if (reportingController) {\r\n                reportingController.report(name, vos);\r\n            }\r\n        }\r\n\r\n        storedVos = [];\r\n    }\r\n\r\n    function initialize(basename, rc, n_ms, requestType) {\r\n        if (rc) {\r\n\r\n            // this will throw if n is invalid, to be\r\n            // caught by the initialize caller.\r\n            n = handlerHelpers.validateN(n_ms);\r\n\r\n            reportingController = rc;\r\n\r\n            if (requestType && requestType.length) {\r\n                type = requestType;\r\n            }\r\n\r\n            name = handlerHelpers.reconstructFullMetricName(\r\n                basename,\r\n                n_ms,\r\n                requestType\r\n            );\r\n\r\n            interval = setInterval(intervalCallback, n);\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        clearInterval(interval);\r\n        interval = null;\r\n        n = null;\r\n        type = null;\r\n        storedVos = [];\r\n        reportingController = null;\r\n    }\r\n\r\n    function handleNewMetric(metric, vo) {\r\n        if (metric === 'HttpList') {\r\n            if (!type || (type === vo.type)) {\r\n                storedVos.push(vo);\r\n            }\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        initialize:         initialize,\r\n        reset:              reset,\r\n        handleNewMetric:    handleNewMetric\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nHttpListHandler.__dashjs_factory_name = 'HttpListHandler';\r\nexport default FactoryMaker.getClassFactory(HttpListHandler);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../../core/FactoryMaker';\r\nimport DVBReporting from './reporters/DVBReporting';\r\n\r\nfunction ReportingFactory(config) {\r\n\r\n    let knownReportingSchemeIdUris = {\r\n        'urn:dvb:dash:reporting:2014': DVBReporting\r\n    };\r\n\r\n    let context = this.context;\r\n    let log = config.log;\r\n    let instance;\r\n\r\n    function create(entry, rangeController) {\r\n        var reporting;\r\n\r\n        try {\r\n            reporting = knownReportingSchemeIdUris[entry.schemeIdUri](context).create();\r\n\r\n            reporting.initialize(entry, rangeController);\r\n        } catch (e) {\r\n            reporting = null;\r\n\r\n            log(`ReportingFactory: could not create Reporting with schemeIdUri ${entry.schemeIdUri} (${e.message})`);\r\n        }\r\n\r\n        return reporting;\r\n    }\r\n\r\n    function register(schemeIdUri, moduleName) {\r\n        knownReportingSchemeIdUris[schemeIdUri] = moduleName;\r\n    }\r\n\r\n    function unregister(schemeIdUri) {\r\n        delete knownReportingSchemeIdUris[schemeIdUri];\r\n    }\r\n\r\n    instance = {\r\n        create:     create,\r\n        register:   register,\r\n        unregister: unregister\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nReportingFactory.__dashjs_factory_name = 'ReportingFactory';\r\nexport default FactoryMaker.getSingletonFactory(ReportingFactory);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../../../core/FactoryMaker';\r\nimport MetricSerialiser from '../../utils/MetricSerialiser';\r\nimport RNG from '../../utils/RNG';\r\n\r\nfunction DVBReporting() {\r\n    let instance;\r\n\r\n    let context = this.context;\r\n    let metricSerialiser = MetricSerialiser(context).getInstance();\r\n    let randomNumberGenerator = RNG(context).getInstance();\r\n\r\n    let USE_DRAFT_DVB_SPEC = true;\r\n    let isReportingPlayer = false;\r\n    let reportingPlayerStatusDecided = false;\r\n    let reportingUrl = null;\r\n    let rangeController = null;\r\n    let allowPendingRequestsToCompleteOnReset = true;\r\n    let pendingRequests = [];\r\n\r\n    function doGetRequest(url, successCB, failureCB) {\r\n        var req = new XMLHttpRequest();\r\n        var oncomplete = function () {\r\n            var reqIndex = pendingRequests.indexOf(req);\r\n\r\n            if (reqIndex === -1) {\r\n                return;\r\n            } else {\r\n                pendingRequests.splice(reqIndex, 1);\r\n            }\r\n\r\n            if ((req.status >= 200) && (req.status < 300)) {\r\n                if (successCB) {\r\n                    successCB();\r\n                }\r\n            } else {\r\n                if (failureCB) {\r\n                    failureCB();\r\n                }\r\n            }\r\n        };\r\n\r\n        pendingRequests.push(req);\r\n\r\n        try {\r\n            req.open('GET', url);\r\n            req.onloadend = oncomplete;\r\n            req.onerror = oncomplete;\r\n            req.send();\r\n        } catch (e) {\r\n            req.onerror();\r\n        }\r\n    }\r\n\r\n    function report(type, vos) {\r\n        if (!Array.isArray(vos)) {\r\n            vos = [vos];\r\n        }\r\n\r\n        // If the Player is not a reporting Player, then the Player shall\r\n        // not report any errors.\r\n        // ... In addition to any time restrictions specified by a Range\r\n        // element within the Metrics element.\r\n        if (isReportingPlayer && rangeController.isEnabled()) {\r\n\r\n            // This reporting mechanism operates by creating one HTTP GET\r\n            // request for every entry in the top level list of the metric.\r\n            vos.forEach(function (vo) {\r\n                var url = metricSerialiser.serialise(vo);\r\n\r\n                // this has been proposed for errata\r\n                if (USE_DRAFT_DVB_SPEC && (type !== 'DVBErrors')) {\r\n                    url = `metricname=${type}&${url}`;\r\n                }\r\n\r\n                // Take the value of the @reportingUrl attribute, append a\r\n                // question mark ('?') character and then append the string\r\n                // created in the previous step.\r\n                url = `${reportingUrl}?${url}`;\r\n\r\n                // Make an HTTP GET request to the URL contained within the\r\n                // string created in the previous step.\r\n                doGetRequest(url, null, function () {\r\n                    // If the Player is unable to make the report, for\r\n                    // example because the @reportingUrl is invalid, the\r\n                    // host cannot be reached, or an HTTP status code other\r\n                    // than one in the 200 series is received, the Player\r\n                    // shall cease being a reporting Player for the\r\n                    // duration of the MPD.\r\n                    isReportingPlayer = false;\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    function initialize(entry, rc) {\r\n        var probability;\r\n\r\n        rangeController = rc;\r\n\r\n        reportingUrl = entry['dvb:reportingUrl'];\r\n\r\n        // If a required attribute is missing, the Reporting descriptor may\r\n        // be ignored by the Player\r\n        if (!reportingUrl) {\r\n            throw new Error(\r\n                'required parameter missing (dvb:reportingUrl)'\r\n            );\r\n        }\r\n\r\n        // A Player's status, as a reporting Player or not, shall remain\r\n        // static for the duration of the MPD, regardless of MPD updates.\r\n        // (i.e. only calling reset (or failure) changes this state)\r\n        if (!reportingPlayerStatusDecided) {\r\n            // NOTE: DVB spec has a typo where it incorrectly references the\r\n            // priority attribute, which should be probability\r\n            probability = entry['dvb:probability'] || entry['dvb:priority'] || 0;\r\n            // If the @priority attribute is set to 1000, it shall be a reporting Player.\r\n            // If the @priority attribute is missing, the Player shall not be a reporting Player.\r\n            // For any other value of the @probability attribute, it shall decide at random whether to be a\r\n            // reporting Player, such that the probability of being one is @probability/1000.\r\n            if (probability && (probability === 1000 || ((probability / 1000) >= randomNumberGenerator.random()))) {\r\n                isReportingPlayer = true;\r\n            }\r\n\r\n            reportingPlayerStatusDecided = true;\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        if (!allowPendingRequestsToCompleteOnReset) {\r\n            pendingRequests.forEach(req => req.abort());\r\n            pendingRequests = [];\r\n        }\r\n\r\n        reportingPlayerStatusDecided = false;\r\n        isReportingPlayer = false;\r\n        reportingUrl = null;\r\n        rangeController = null;\r\n    }\r\n\r\n    instance = {\r\n        report:     report,\r\n        initialize: initialize,\r\n        reset:      reset\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nDVBReporting.__dashjs_factory_name = 'DVBReporting';\r\nexport default FactoryMaker.getClassFactory(DVBReporting);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport DVBErrors from '../vo/DVBErrors';\r\nimport Events from '../../../core/events/Events';\r\nimport MediaPlayerEvents from '../../MediaPlayerEvents';\r\nimport MetricsReportingEvents from '../MetricsReportingEvents';\r\nimport FactoryMaker from '../../../core/FactoryMaker';\r\n\r\nfunction DVBErrorsTranslator(config) {\r\n\r\n    let instance;\r\n    let eventBus = config.eventBus;\r\n    let metricModel = config.metricsModel;\r\n    let mpd;\r\n\r\n    function report(vo) {\r\n        var o = new DVBErrors();\r\n\r\n        if (!mpd) {\r\n            return;\r\n        }\r\n\r\n        for (const key in vo) {\r\n            if (vo.hasOwnProperty(key)) {\r\n                o[key] = vo[key];\r\n            }\r\n        }\r\n\r\n        if (!o.mpdurl) {\r\n            o.mpdurl = mpd.originalUrl || mpd.url;\r\n        }\r\n\r\n        if (!o.terror) {\r\n            o.terror = new Date();\r\n        }\r\n\r\n        metricModel.addDVBErrors(o);\r\n    }\r\n\r\n    function onManifestUpdate(e) {\r\n        if (e.error) {\r\n            return;\r\n        }\r\n\r\n        mpd = e.manifest;\r\n    }\r\n\r\n    function onServiceLocationChanged(e) {\r\n        report({\r\n            errorcode:          DVBErrors.BASE_URL_CHANGED,\r\n            servicelocation:    e.entry\r\n        });\r\n    }\r\n\r\n    function onBecameReporter() {\r\n        report({\r\n            errorcode: DVBErrors.BECAME_REPORTER\r\n        });\r\n    }\r\n\r\n    function handleHttpMetric(vo) {\r\n        if ((vo.responsecode === 0) ||      // connection failure - unknown\r\n                (vo.responsecode >= 400) || // HTTP error status code\r\n                (vo.responsecode < 100) ||  // unknown status codes\r\n                (vo.responsecode >= 600)) { // unknown status codes\r\n            report({\r\n                errorcode:          vo.responsecode || DVBErrors.CONNECTION_ERROR,\r\n                url:                vo.url,\r\n                terror:             vo.tresponse,\r\n                servicelocation:    vo._serviceLocation\r\n            });\r\n        }\r\n    }\r\n\r\n    function onMetricEvent(e) {\r\n        switch (e.metric) {\r\n        case 'HttpList':\r\n            handleHttpMetric(e.value);\r\n            break;\r\n        default:\r\n            break;\r\n        }\r\n    }\r\n\r\n    function onPlaybackError(e) {\r\n        var reason = e.error ? e.error.code : 0;\r\n        var errorcode;\r\n\r\n        switch (reason) {\r\n            case MediaError.MEDIA_ERR_NETWORK:\r\n                errorcode = DVBErrors.CONNECTION_ERROR;\r\n                break;\r\n            case MediaError.MEDIA_ERR_DECODE:\r\n                errorcode = DVBErrors.CORRUPT_MEDIA_OTHER;\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n\r\n        report({\r\n            errorcode: errorcode\r\n        });\r\n    }\r\n\r\n    function initialise() {\r\n        eventBus.on(Events.MANIFEST_UPDATED, onManifestUpdate, instance);\r\n        eventBus.on(\r\n            Events.SERVICE_LOCATION_BLACKLIST_CHANGED,\r\n            onServiceLocationChanged,\r\n            instance\r\n        );\r\n        eventBus.on(MediaPlayerEvents.METRIC_ADDED, onMetricEvent, instance);\r\n        eventBus.on(MediaPlayerEvents.METRIC_UPDATED, onMetricEvent, instance);\r\n        eventBus.on(MediaPlayerEvents.PLAYBACK_ERROR, onPlaybackError, instance);\r\n        eventBus.on(\r\n            MetricsReportingEvents.BECAME_REPORTING_PLAYER,\r\n            onBecameReporter,\r\n            instance\r\n        );\r\n    }\r\n\r\n    function reset() {\r\n        eventBus.off(Events.MANIFEST_UPDATED, onManifestUpdate, instance);\r\n        eventBus.off(\r\n            Events.SERVICE_LOCATION_BLACKLIST_CHANGED,\r\n            onServiceLocationChanged,\r\n            instance\r\n        );\r\n        eventBus.off(MediaPlayerEvents.METRIC_ADDED, onMetricEvent, instance);\r\n        eventBus.off(MediaPlayerEvents.METRIC_UPDATED, onMetricEvent, instance);\r\n        eventBus.off(MediaPlayerEvents.PLAYBACK_ERROR, onPlaybackError, instance);\r\n        eventBus.off(\r\n            MetricsReportingEvents.BECAME_REPORTING_PLAYER,\r\n            onBecameReporter,\r\n            instance\r\n        );\r\n    }\r\n\r\n    instance = {\r\n        initialise: initialise,\r\n        reset:      reset\r\n    };\r\n\r\n    initialise();\r\n\r\n    return instance;\r\n}\r\n\r\nDVBErrorsTranslator.__dashjs_factory_name = 'DVBErrorsTranslator';\r\nexport default FactoryMaker.getSingletonFactory(DVBErrorsTranslator);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../../core/FactoryMaker';\r\n\r\nfunction HandlerHelpers() {\r\n    return {\r\n        reconstructFullMetricName: function (key, n, type) {\r\n            var mn = key;\r\n\r\n            if (n) {\r\n                mn += '(' + n;\r\n\r\n                if (type && type.length) {\r\n                    mn += ',' + type;\r\n                }\r\n\r\n                mn += ')';\r\n            }\r\n\r\n            return mn;\r\n        },\r\n\r\n        validateN: function (n_ms) {\r\n            if (!n_ms) {\r\n                throw new Error('missing n');\r\n            }\r\n\r\n            if (isNaN(n_ms)) {\r\n                throw new Error('n is NaN');\r\n            }\r\n\r\n            // n is a positive integer is defined to refer to the metric\r\n            // in which the buffer level is recorded every n ms.\r\n            if (n_ms < 0) {\r\n                throw new Error('n must be positive');\r\n            }\r\n\r\n            return n_ms;\r\n        }\r\n    };\r\n}\r\n\r\nHandlerHelpers.__dashjs_factory_name = 'HandlerHelpers';\r\nexport default FactoryMaker.getSingletonFactory(HandlerHelpers);\r\n","import Metrics from '../vo/Metrics';\r\nimport Range from '../vo/Range';\r\nimport Reporting from '../vo/Reporting';\r\nimport FactoryMaker from '../../../core/FactoryMaker';\r\n\r\nfunction ManifestParsing (config) {\r\n    let instance;\r\n    let dashManifestModel = config.dashManifestModel;\r\n\r\n    function getMetricsRangeStartTime(manifest, dynamic, range) {\r\n        var mpd = dashManifestModel.getMpd(manifest);\r\n        var periods;\r\n        var presentationStartTime = 0;\r\n        var reportingStartTime;\r\n\r\n        if (dynamic) {\r\n            // For services with MPD@type='dynamic', the start time is\r\n            // indicated in wall clock time by adding the value of this\r\n            // attribute to the value of the MPD@availabilityStartTime\r\n            // attribute.\r\n            presentationStartTime = mpd.availabilityStartTime.getTime() / 1000;\r\n        } else {\r\n            // For services with MPD@type='static', the start time is indicated\r\n            // in Media Presentation time and is relative to the PeriodStart\r\n            // time of the first Period in this MPD.\r\n            periods = this.getRegularPeriods(manifest, mpd);\r\n\r\n            if (periods.length) {\r\n                presentationStartTime = periods[0].start;\r\n            }\r\n        }\r\n\r\n        // When not present, DASH Metrics collection is\r\n        // requested from the beginning of content\r\n        // consumption.\r\n        reportingStartTime = presentationStartTime;\r\n\r\n        if (range && range.hasOwnProperty('starttime')) {\r\n            reportingStartTime += range.starttime;\r\n        }\r\n\r\n        return reportingStartTime;\r\n    }\r\n\r\n    function getMetrics(manifest) {\r\n        var metrics = [];\r\n\r\n        if (manifest.Metrics_asArray) {\r\n            manifest.Metrics_asArray.forEach(metric => {\r\n                var metricEntry = new Metrics();\r\n                var isDynamic = dashManifestModel.getIsDynamic(manifest);\r\n\r\n                if (metric.hasOwnProperty('metrics')) {\r\n                    metricEntry.metrics = metric.metrics;\r\n                } else {\r\n                    //console.log(\"Invalid Metrics. metrics must be set. Ignoring.\");\r\n                    return;\r\n                }\r\n\r\n                if (metric.Range_asArray) {\r\n                    metric.Range_asArray.forEach(range => {\r\n                        var rangeEntry = new Range();\r\n\r\n                        rangeEntry.starttime =\r\n                            getMetricsRangeStartTime(manifest, isDynamic, range);\r\n\r\n                        if (range.hasOwnProperty('duration')) {\r\n                            rangeEntry.duration = range.duration;\r\n                        } else {\r\n                            // if not present, the value is identical to the\r\n                            // Media Presentation duration.\r\n                            rangeEntry.duration = dashManifestModel.getDuration(manifest);\r\n                        }\r\n\r\n                        rangeEntry._useWallClockTime = isDynamic;\r\n\r\n                        metricEntry.Range.push(rangeEntry);\r\n                    });\r\n                }\r\n\r\n                if (metric.Reporting_asArray) {\r\n                    metric.Reporting_asArray.forEach(reporting => {\r\n                        var reportingEntry = new Reporting();\r\n\r\n                        if (reporting.hasOwnProperty('schemeIdUri')) {\r\n                            reportingEntry.schemeIdUri = reporting.schemeIdUri;\r\n                        } else {\r\n                            // Invalid Reporting. schemeIdUri must be set. Ignore.\r\n                            return;\r\n                        }\r\n\r\n                        for (const prop in reporting) {\r\n                            if (reporting.hasOwnProperty(prop)) {\r\n                                reportingEntry[prop] = reporting[prop];\r\n                            }\r\n                        }\r\n\r\n                        metricEntry.Reporting.push(reportingEntry);\r\n                    });\r\n                } else {\r\n                    // Invalid Metrics. At least one reporting must be present. Ignore\r\n                    return;\r\n                }\r\n\r\n                metrics.push(metricEntry);\r\n            });\r\n        }\r\n\r\n        return metrics;\r\n    }\r\n\r\n    instance = {\r\n        getMetrics: getMetrics\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nManifestParsing.__dashjs_factory_name = 'ManifestParsing';\r\nexport default FactoryMaker.getSingletonFactory(ManifestParsing);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../../core/FactoryMaker';\r\n\r\nfunction MetricSerialiser() {\r\n\r\n    // For each entry in the top level list within the metric (in the case\r\n    // of the DVBErrors metric each entry corresponds to an \"error event\"\r\n    // described in clause 10.8.4) the Player shall:\r\n    function serialise(metric) {\r\n        var pairs = [];\r\n        var obj = [];\r\n        var key,\r\n            value;\r\n\r\n        // Take each (key, value) pair from the metric entry and create a\r\n        // string consisting of the name of the key, followed by an equals\r\n        // ('=') character, followed by the string representation of the\r\n        // value. The string representation of the value is created based\r\n        // on the type of the value following the instructions in Table 22.\r\n        for (key in metric) {\r\n            if (metric.hasOwnProperty(key) && (key.indexOf('_') !== 0)) {\r\n                value = metric[key];\r\n\r\n                // we want to ensure that keys still end up in the report\r\n                // even if there is no value\r\n                if ((value === undefined) || (value === null)) {\r\n                    value = '';\r\n                }\r\n\r\n                // DVB A168 10.12.4 Table 22\r\n                if (Array.isArray(value)) {\r\n                    // if trace or similar is null, do not include in output\r\n                    if (!value.length) {\r\n                        continue;\r\n                    }\r\n\r\n                    obj = [];\r\n\r\n                    value.forEach(function (v) {\r\n                        var isBuiltIn = Object.prototype.toString.call(v).slice(8, -1) !== 'Object';\r\n\r\n                        obj.push(isBuiltIn ? v : serialise(v));\r\n                    });\r\n\r\n                    value = obj.map(encodeURIComponent).join(',');\r\n                } else if (typeof value === 'string') {\r\n                    value = encodeURIComponent(value);\r\n                } else if (value instanceof Date) {\r\n                    value = value.toISOString();\r\n                } else if (typeof value === 'number') {\r\n                    value = Math.round(value);\r\n                }\r\n\r\n                pairs.push(key + '=' + value);\r\n            }\r\n        }\r\n\r\n        // Concatenate the strings created in the previous step with an\r\n        // ampersand ('&') character between each one.\r\n        return pairs.join('&');\r\n    }\r\n\r\n    return {\r\n        serialise: serialise\r\n    };\r\n}\r\n\r\nMetricSerialiser.__dashjs_factory_name = 'MetricSerialiser';\r\nexport default FactoryMaker.getSingletonFactory(MetricSerialiser);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../../core/FactoryMaker';\r\n\r\nfunction RNG() {\r\n\r\n    // check whether secure random numbers are available. if not, revert to\r\n    // using Math.random\r\n    let crypto = window.crypto || window.msCrypto;\r\n\r\n    // could just as easily use any other array type by changing line below\r\n    let ArrayType = Uint32Array;\r\n    let MAX_VALUE = Math.pow(2, ArrayType.BYTES_PER_ELEMENT * 8) - 1;\r\n\r\n    // currently there is only one client for this code, and that only uses\r\n    // a single random number per initialisation. may want to increase this\r\n    // number if more consumers in the future\r\n    let NUM_RANDOM_NUMBERS = 10;\r\n\r\n    let randomNumbers,\r\n        index,\r\n        instance;\r\n\r\n    function initialise() {\r\n        if (crypto) {\r\n            if (!randomNumbers) {\r\n                randomNumbers = new ArrayType(NUM_RANDOM_NUMBERS);\r\n            }\r\n            crypto.getRandomValues(randomNumbers);\r\n            index = 0;\r\n        }\r\n    }\r\n\r\n    function rand(min, max) {\r\n        var r;\r\n\r\n        if (!min) {\r\n            min = 0;\r\n        }\r\n\r\n        if (!max) {\r\n            max = 1;\r\n        }\r\n\r\n        if (crypto) {\r\n            if (index === randomNumbers.length) {\r\n                initialise();\r\n            }\r\n\r\n            r = randomNumbers[index] / MAX_VALUE;\r\n            index += 1;\r\n        } else {\r\n            r = Math.random();\r\n        }\r\n\r\n        return (r * (max - min)) + min;\r\n    }\r\n\r\n    instance = {\r\n        random: rand,\r\n    };\r\n\r\n    initialise();\r\n\r\n    return instance;\r\n}\r\n\r\nRNG.__dashjs_factory_name = 'RNG';\r\nexport default FactoryMaker.getSingletonFactory(RNG);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass DVBErrors {\r\n    constructor() {\r\n        this.mpdurl = null;\r\n        // String - Absolute URL from which the MPD was originally\r\n        // retrieved (MPD updates will not change this value).\r\n\r\n        this.errorcode = null;\r\n        // String - The value of errorcode depends upon the type\r\n        // of error being reported. For an error listed in the\r\n        // ErrorType column below the value is as described in the\r\n        // Value column.\r\n        //\r\n        // ErrorType                                            Value\r\n        // ---------                                            -----\r\n        // HTTP error status code                               HTTP status code\r\n        // Unknown HTTP status code                             HTTP status code\r\n        // SSL connection failed                                \"SSL\" followed by SSL alert value\r\n        // DNS resolution failed                                \"C00\"\r\n        // Host unreachable                                     \"C01\"\r\n        // Connection refused                                   \"C02\"\r\n        // Connection error – Not otherwise specified           \"C03\"\r\n        // Corrupt media – ISO BMFF container cannot be parsed  \"M00\"\r\n        // Corrupt media – Not otherwise specified              \"M01\"\r\n        // Changing Base URL in use due to errors               \"F00\"\r\n        // Becoming an error reporting Player                   \"S00\"\r\n\r\n        this.terror = null;\r\n        // Real-Time - Date and time at which error occurred in UTC,\r\n        // formatted as a combined date and time according to ISO 8601.\r\n\r\n        this.url = null;\r\n        // String - Absolute URL from which data was being requested\r\n        // when this error occurred. If the error report is in relation\r\n        // to corrupt media or changing BaseURL, this may be a null\r\n        // string if the URL from which the media was obtained or\r\n        // which led to the change of BaseURL is no longer known.\r\n\r\n        this.ipaddress = null;\r\n        // String - IP Address which the host name in \"url\" resolved to.\r\n        // If the error report is in relation to corrupt media or\r\n        // changing BaseURL, this may be a null string if the URL\r\n        // from which the media was obtained or which led to the\r\n        // change of BaseURL is no longer known.\r\n\r\n        this.servicelocation = null;\r\n        // String - The value of the serviceLocation field in the\r\n        // BaseURL being used. In the event of this report indicating\r\n        // a change of BaseURL this is the value from the BaseURL\r\n        // being moved from.\r\n    }\r\n}\r\n\r\nDVBErrors.SSL_CONNECTION_FAILED_PREFIX = 'SSL';\r\nDVBErrors.DNS_RESOLUTION_FAILED =        'C00';\r\nDVBErrors.HOST_UNREACHABLE =             'C01';\r\nDVBErrors.CONNECTION_REFUSED =           'C02';\r\nDVBErrors.CONNECTION_ERROR =             'C03';\r\nDVBErrors.CORRUPT_MEDIA_ISOBMFF =        'M00';\r\nDVBErrors.CORRUPT_MEDIA_OTHER =          'M01';\r\nDVBErrors.BASE_URL_CHANGED =             'F00';\r\nDVBErrors.BECAME_REPORTER =              'S00';\r\n\r\nexport default DVBErrors;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass Metrics {\r\n    constructor() {\r\n\r\n        this.metrics = '';\r\n        this.Range = [];\r\n        this.Reporting = [];\r\n    }\r\n}\r\n\r\nexport default Metrics;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass Range {\r\n    constructor() {\r\n\r\n        // as defined in ISO23009-1\r\n        this.starttime = 0;\r\n        this.duration = Infinity;\r\n\r\n        // for internal use\r\n        this._useWallClockTime = false;\r\n    }\r\n}\r\n\r\nexport default Range;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass Reporting {\r\n    constructor() {\r\n        // Reporting is a DescriptorType and doesn't have any additional fields\r\n        this.schemeIdUri = '';\r\n        this.value = '';\r\n    }\r\n}\r\n\r\nexport default Reporting;\r\n","/**\r\n* The copyright in this software is being made available under the BSD License,\r\n* included below. This software may be subject to other third party and contributor\r\n* rights, including patent rights, and no such rights are granted under this license.\r\n*\r\n* Copyright (c) 2013, Dash Industry Forum.\r\n* All rights reserved.\r\n*\r\n* Redistribution and use in source and binary forms, with or without modification,\r\n* are permitted provided that the following conditions are met:\r\n*  * Redistributions of source code must retain the above copyright notice, this\r\n*  list of conditions and the following disclaimer.\r\n*  * Redistributions in binary form must reproduce the above copyright notice,\r\n*  this list of conditions and the following disclaimer in the documentation and/or\r\n*  other materials provided with the distribution.\r\n*  * Neither the name of Dash Industry Forum nor the names of its\r\n*  contributors may be used to endorse or promote products derived from this software\r\n*  without specific prior written permission.\r\n*\r\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n*  POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\nfunction CustomTimeRanges(/*config*/) {\r\n    let customTimeRangeArray = [];\r\n    let length = 0;\r\n\r\n    function add(start, end) {\r\n        var i = 0;\r\n\r\n        for (i = 0; (i < this.customTimeRangeArray.length) && (start > this.customTimeRangeArray[i].start); i++);\r\n\r\n        this.customTimeRangeArray.splice(i, 0, {start: start,end: end});\r\n\r\n        for (i = 0; i < this.customTimeRangeArray.length - 1; i++) {\r\n            if (this.mergeRanges(i,i + 1)) {\r\n                i--;\r\n            }\r\n        }\r\n        this.length = this.customTimeRangeArray.length;\r\n    }\r\n\r\n    function clear() {\r\n        this.customTimeRangeArray = [];\r\n        this.length = 0;\r\n    }\r\n\r\n    function remove(start, end) {\r\n        for (var i = 0; i < this.customTimeRangeArray.length; i++) {\r\n            if (start <= this.customTimeRangeArray[i].start && end >= this.customTimeRangeArray[i].end) {\r\n                //      |--------------Range i-------|\r\n                //|---------------Range to remove ---------------|\r\n                //    or\r\n                //|--------------Range i-------|\r\n                //|--------------Range to remove ---------------|\r\n                //    or\r\n                //                 |--------------Range i-------|\r\n                //|--------------Range to remove ---------------|\r\n                this.customTimeRangeArray.splice(i,1);\r\n                i--;\r\n\r\n            }else if (start > this.customTimeRangeArray[i].start && end < this.customTimeRangeArray[i].end) {\r\n                //|-----------------Range i----------------|\r\n                //        |-------Range to remove -----|\r\n                this.customTimeRangeArray.splice(i + 1, 0, {start: end,end: this.customTimeRangeArray[i].end});\r\n                this.customTimeRangeArray[i].end = start;\r\n                break;\r\n            }else if ( start > this.customTimeRangeArray[i].start && start < this.customTimeRangeArray[i].end) {\r\n                //|-----------Range i----------|\r\n                //                    |---------Range to remove --------|\r\n                //    or\r\n                //|-----------------Range i----------------|\r\n                //            |-------Range to remove -----|\r\n                this.customTimeRangeArray[i].end = start;\r\n            }else if ( end > this.customTimeRangeArray[i].start && end < this.customTimeRangeArray[i].end) {\r\n                //                     |-----------Range i----------|\r\n                //|---------Range to remove --------|\r\n                //            or\r\n                //|-----------------Range i----------------|\r\n                //|-------Range to remove -----|\r\n                this.customTimeRangeArray[i].start = end;\r\n            }\r\n        }\r\n\r\n        this.length = this.customTimeRangeArray.length;\r\n    }\r\n\r\n    function mergeRanges(rangeIndex1, rangeIndex2) {\r\n        var range1 = this.customTimeRangeArray[rangeIndex1];\r\n        var range2 = this.customTimeRangeArray[rangeIndex2];\r\n\r\n        if (range1.start <=  range2.start && range2.start <= range1.end && range1.end <= range2.end) {\r\n            //|-----------Range1----------|\r\n            //                    |-----------Range2----------|\r\n            range1.end = range2.end;\r\n            this.customTimeRangeArray.splice(rangeIndex2,1);\r\n            return true;\r\n\r\n        } else if (range2.start <= range1.start && range1.start <= range2.end && range2.end <= range1.end) {\r\n            //                |-----------Range1----------|\r\n            //|-----------Range2----------|\r\n            range1.start = range2.start;\r\n            this.customTimeRangeArray.splice(rangeIndex2,1);\r\n            return true;\r\n        } else if (range2.start <= range1.start && range1.start <= range2.end && range1.end <= range2.end) {\r\n            //      |--------Range1-------|\r\n            //|---------------Range2--------------|\r\n            this.customTimeRangeArray.splice(rangeIndex1,1);\r\n            return true;\r\n        } else if (range1.start <= range2.start && range2.start <= range1.end && range2.end <= range1.end) {\r\n            //|-----------------Range1--------------|\r\n            //        |-----------Range2----------|\r\n            this.customTimeRangeArray.splice(rangeIndex2,1);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function start(index) {\r\n        return this.customTimeRangeArray[index].start;\r\n    }\r\n\r\n    function end(index) {\r\n        return this.customTimeRangeArray[index].end;\r\n    }\r\n\r\n    return {\r\n        customTimeRangeArray: customTimeRangeArray,\r\n        length: length,\r\n        add: add,\r\n        clear: clear,\r\n        remove: remove,\r\n        mergeRanges: mergeRanges,\r\n        start: start,\r\n        end: end\r\n    };\r\n}\r\nCustomTimeRanges.__dashjs_factory_name = 'CustomTimeRanges';\r\nexport default FactoryMaker.getClassFactory(CustomTimeRanges);\r\n"]}